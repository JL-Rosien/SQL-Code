----SQL CODE
---Calculating First Indices
---Average Temperature, average daily and average night temperature
	DROP VIEW IF EXISTS indices CASCADE; 
	CREATE VIEW indices AS
	SELECT
	    mean_total.id, mean_total.device_id, mean_total.t_avg,
	    mean_d.t_d,
	    mean_n.t_n
	FROM
	(
	SELECT 
	    id,
	    device_id,
	    avg(d.value) as t_avg  
	FROM data d
	JOIN metadata m ON m.id=d.meta_id
	WHERE m.term_id = 11
	GROUP BY m.id
	) as mean_total
	 
	JOIN
	 
	(
	SELECT 
	    id,
	    avg(d.value) as t_d  
	FROM data d
	JOIN metadata m ON m.id=d.meta_id
	WHERE d.variable_id=1 AND m.term_id = 11
	AND EXTRACT(HOUR FROM d.tstamp) >= 6 
	AND EXTRACT(HOUR FROM d.tstamp) < 18
	GROUP BY m.id
	) as mean_d
	 
	ON mean_total.id=mean_d.id
	 
	JOIN
	 
	(
	SELECT 
	    id,
	    avg(d.value) as t_n  
	FROM data d
	JOIN metadata m ON m.id=d.meta_id
	WHERE d.variable_id=1 AND m.term_id = 11
	AND (EXTRACT(HOUR FROM d.tstamp) < 6 
	OR EXTRACT(HOUR FROM d.tstamp) >= 18)
	GROUP BY m.id
	) as mean_n
	 
	ON mean_d.id=mean_n.id
	 
	SELECT * FROM indices;		


---Adding temperature difference of day and night

	DROP VIEW IF EXISTS hobo_indices CASCADE;
	CREATE VIEW hobo_indices AS
	SELECT *,
	    (i.t_d - i.t_n) as t_nd
	FROM indices i;
	SELECT * FROM hobo_indices;


---Final Table of Indices---
---Prequesitions
---Determination of closest neighbour of each HOBO in 2021

	DROP VIEW IF EXISTS meta21;
	CREATE VIEW meta21 AS
	
	WITH meta21 AS (
		SELECT *, 
		(SELECT id FROM metadata ly WHERE term_id=9 ORDER BY st_distance(m.location, ly.location) ASC LIMIT 1) as close_meta20_id,
		(SELECT id FROM metadata ly WHERE term_id=7 ORDER BY st_distance(m.location, ly.location) ASC LIMIT 1) as close_meta19_id
		FROM metadata m
		WHERE term_id=11 AND sensor_id=1
		)
	SELECT * FROM meta21;

---Normalizing data
	DROP VIEW IF EXISTS data_norm;
	CREATE VIEW data_norm AS
	-- From here, it's only a single SQL statement
	SELECT
		row_number() OVER (PARTITION BY meta_id, variable_id ORDER BY tstamp ASC) as measurement_index,
		*,
		value - avg(value) OVER (PARTITION BY meta_id, variable_id) AS norm,
		avg(value) OVER (PARTITION BY meta_id, variable_id) AS group_avg	
	FROM data;

---Calculating Correlation to HOBOs in 2019 

	DROP VIEW IF EXISTS indices19 CASCADE;
	CREATE VIEW indices19 AS
	    SELECT 
	        meta21.id,                       
	        avg(d.value) AS "mean",                 
	        corr(d.norm, d20.norm) AS "Tcorr1Y19"    
	    FROM data_norm d                               
	    JOIN meta21 on meta21.id = d.meta_id        
	    JOIN metadata m20 on meta21.close_meta19_id=m20.id
	  JOIN data_norm d20 on m20.id=d20.meta_id AND                                                                 d.measurement_index=d20.measurement_index
	    GROUP BY meta21.id;
	SELECT * FROM indices19;
	 
---Calculating Correlation to HOBOs in 2020

	DROP VIEW IF EXISTS indices20;
	CREATE VIEW indices20 AS
	    SELECT 
	        meta21.id,                              
	        avg(d.value) AS "mean",                 
	        corr(d.norm, d20.norm) AS "Tcorr1Y20"     
	    FROM data_norm d                            
	    JOIN meta21 on meta21.id = d.meta_id        
	    JOIN metadata m20 on meta21.close_meta20_id=m20.id
	   JOIN data_norm d20 on m20.id=d20.meta_id AND d.measurement_index=d20.measurement_index
	    GROUP BY meta21.id;
	SELECT * FROM indices20;

---Joining Correlations together

	DROP VIEW IF EXISTS indices_rosien CASCADE;
	CREATE VIEW indices_rosien AS
	SELECT i19."mean", i19."Tcorr1Y19", i20."Tcorr1Y20", m.device_id, m.location  FROM indices19 i19
	JOIN metadata m on i19.id=m.id
	JOIN indices20 i20 on i19.id=i20.id;
	SELECT * FROM indices_rosien;
	 
---Joining all VIEWS together: Final VIEW of all indices 

	DROP VIEW IF EXISTS HOBO_corr;
	CREATE VIEW HOBO_corr AS
	SELECT 
	id, r.device_id, t_avg, t_d, t_n, t_nd, r."Tcorr1Y19", r."Tcorr1Y20"
	FROM hobo_indices
	JOIN indices_rosien r ON r.device_id=hobo_indices.device_id;
	SELECT * FROM HOBO_corr; 
